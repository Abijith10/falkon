# Enable policy to run automoc on generated files.
if(POLICY CMP0071)
  cmake_policy(SET CMP0071 NEW)
endif()

# Macro to get various pyside / python include / link flags.
macro(pyside2_config option output_var)
    if(${ARGC} GREATER 2)
        set(is_list ${ARGV2})
    else()
        set(is_list "")
    endif()

    execute_process(
      COMMAND python "${CMAKE_CURRENT_SOURCE_DIR}/pyside2_config.py" ${option}
      OUTPUT_VARIABLE ${output_var}
      OUTPUT_STRIP_TRAILING_WHITESPACE)

    if ("${${output_var}}" STREQUAL "")
        message(FATAL_ERROR "Got empty string when running: pyside2_config.py ${option}")
    endif()
    if(is_list)
        string (REPLACE " " ";" ${output_var} "${${output_var}}")
    endif()
endmacro()

set(SHIBOKEN_PATH "/usr/bin/shiboken2")
set(TYPESYSTEMS_PATH "/usr/share/PySide2/typesystems")

if(NOT EXISTS ${SHIBOKEN_PATH})
    message(FATAL_ERROR "Shiboken executable not found at path: ${SHIBOKEN_PATH}")
endif()

pyside2_config(--python-include PYTHON_INCLUDE_DIR)
pyside2_config(--pyside2-include PYSIDE2_INCLUDE_DIR 1)
pyside2_config(--python-link-cmake PYTHON_LINKING_DATA 1)
pyside2_config(--pyside2-shared-libraries-cmake PYSIDE2_SHARED_LIBRARIES 1)

# Get all relevant Qt include dirs, to pass them on to shiboken.
get_property(QT_CORE_INCLUDE_DIRS TARGET Qt5::Core PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_GUI_INCLUDE_DIRS TARGET Qt5::Gui PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_WIDGETS_INCLUDE_DIRS TARGET Qt5::Widgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_WEBENGINECORE_INCLUDE_DIRS TARGET Qt5::WebEngineCore PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(QT_WEBENGINEWIDGETS_INCLUDE_DIRS TARGET Qt5::WebEngineWidgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
set(QT_INCLUDE_DIRS 
    ${QT_CORE_INCLUDE_DIRS}
    ${QT_GUI_INCLUDE_DIRS}
    ${QT_WIDGETS_INCLUDE_DIRS}
    ${QT_WEBENGINECORE_INCLUDE_DIRS}
    ${QT_WEBENGINEWIDGETS_INCLUDE_DIRS}
)
set(INCLUDES "")
foreach(INCLUDE_DIR ${QT_INCLUDE_DIRS})
    list(APPEND INCLUDES "-I${INCLUDE_DIR}")
endforeach()

# Set up the options to pass to shiboken.
set(WRAPPED_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/wrappedclasses.h)
set(TYPESYSTEM_FILE ${CMAKE_CURRENT_SOURCE_DIR}/pyfalkon.xml)

set(SHIBOKEN_OPTIONS --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-pyside-extensions --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack
    ${INCLUDES}
    -I${CMAKE_SOURCE_DIR}
    -I${CMAKE_SOURCE_DIR}/src/lib/3rdparty
    -I${CMAKE_SOURCE_DIR}/src/lib/adblock
    -I${CMAKE_SOURCE_DIR}/src/lib/app
    -I${CMAKE_SOURCE_DIR}/src/lib/autofill
    -I${CMAKE_SOURCE_DIR}/src/lib/bookmarks
    -I${CMAKE_SOURCE_DIR}/src/lib/cookies
    -I${CMAKE_SOURCE_DIR}/src/lib/downloads
    -I${CMAKE_SOURCE_DIR}/src/lib/history
    -I${CMAKE_SOURCE_DIR}/src/lib/navigation
    -I${CMAKE_SOURCE_DIR}/src/lib/network
    -I${CMAKE_SOURCE_DIR}/src/lib/notifications
    -I${CMAKE_SOURCE_DIR}/src/lib/opensearch
    -I${CMAKE_SOURCE_DIR}/src/lib/other
    -I${CMAKE_SOURCE_DIR}/src/lib/plugins
    -I${CMAKE_SOURCE_DIR}/src/lib/popupwindow
    -I${CMAKE_SOURCE_DIR}/src/lib/preferences
    -I${CMAKE_SOURCE_DIR}/src/lib/session
    -I${CMAKE_SOURCE_DIR}/src/lib/sidebar
    -I${CMAKE_SOURCE_DIR}/src/lib/tabwidget
    -I${CMAKE_SOURCE_DIR}/src/lib/tools
    -I${CMAKE_SOURCE_DIR}/src/lib/webengine
    -I${CMAKE_SOURCE_DIR}/src/lib/webtab
    -T${CMAKE_SOURCE_DIR}
    -T${TYPESYSTEMS_PATH}
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

# Specify which sources will be generated by shiboken, and their dependencies.
set(GENERATED_SOURCES
    ${CMAKE_CURRENT_BINARY_DIR}/PyFalkon/pyfalkon_module_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/PyFalkon/desktopfile_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/PyFalkon/plugininterface_wrapper.cpp
)
set(GENERATED_SOURCES_DEPENDENCIES
    ${WRAPPED_HEADER}
    ${TYPESYSTEM_FILE}
)

# Add custom target to run shiboken.
add_custom_command(OUTPUT ${GENERATED_SOURCES}
                    COMMAND ${SHIBOKEN_PATH}
                    ${SHIBOKEN_OPTIONS} ${WRAPPED_HEADER} ${TYPESYSTEM_FILE}
                    DEPENDS ${GENERATED_SOURCES_DEPENDENCIES}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${TYPESYSTEM_FILE}.")

# We need to include the headers for the module bindings that we use.
set(PYSIDE2_ADDITIONAL_INCLUDES "")
foreach(INCLUDE_DIR ${PYSIDE2_INCLUDE_DIR})
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtCore")
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtGui")
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtNetwork")
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtWidgets")
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtWebChannel")
    list(APPEND PYSIDE2_ADDITIONAL_INCLUDES "${INCLUDE_DIR}/QtWebEngineWidgets")
endforeach()

set( PyFalkon_SRCS
    pythonplugin.cpp
    ${GENERATED_SOURCES}
)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

add_library(PyFalkonPrivate SHARED ${PyFalkon_SRCS})
set_target_properties(PyFalkonPrivate PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION "2")
install(TARGETS PyFalkonPrivate ${KDE_INSTALL_TARGETS_DEFAULT_ARGS} LIBRARY NAMELINK_SKIP)

target_include_directories(PyFalkonPrivate PRIVATE ${PYTHON_INCLUDE_DIR})
target_include_directories(PyFalkonPrivate PRIVATE ${PYSIDE2_INCLUDE_DIR})
target_include_directories(PyFalkonPrivate PRIVATE ${PYSIDE2_ADDITIONAL_INCLUDES})
target_include_directories(PyFalkonPrivate PRIVATE ${CMAKE_SOURCE_DIR})
target_include_directories(PyFalkonPrivate PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/PyFalkon)

target_link_libraries(PyFalkonPrivate PRIVATE FalkonPrivate)
target_link_libraries(PyFalkonPrivate PRIVATE Qt5::Widgets)
target_link_libraries(PyFalkonPrivate PRIVATE ${PYSIDE2_SHARED_LIBRARIES})

# Find and link to the python library.
list(GET PYTHON_LINKING_DATA 0 PYTHON_LIBDIR)
list(GET PYTHON_LINKING_DATA 1 PYTHON_LIB)
find_library(PYTHON_LINK_FLAGS ${PYTHON_LIB} HINTS ${PYTHON_LIBDIR})
target_link_libraries(PyFalkonPrivate PRIVATE ${PYTHON_LINK_FLAGS})

# Same as CONFIG += no_keywords to avoid syntax errors in object.h due to the usage of the word Slot
target_compile_definitions(PyFalkonPrivate PRIVATE QT_NO_KEYWORDS)

